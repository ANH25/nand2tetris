// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	
	static Array ram;
	static Array heap;
	static Array freeList;
	
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048; // heap base
		let freeList = heap; // free segments list
		let freeList[0] = 0; // next segment
		let freeList[1] = 14334; // heap size 
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
	}

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
	}

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		
		var Array cur_block, free_block;
		let cur_block = freeList;
		while(true) {
			if(~(cur_block[1] < (size + 2))) {
				let free_block = cur_block + 2 + cur_block[1] - (size+2);
				let free_block[0] = 0;
				let free_block[1] = size;
				let cur_block[1] = cur_block[1] - (size+2);
				return free_block + 2;
			}
			else {
				if(cur_block[0] = 0) {
					return 0; // fixme: how to indicate failure?
				}
				let cur_block = cur_block[0];
			}
		}
		return 0;

		
		//simple heap management
		/*
		var int block;
		let block = freeList;
		let freeList = freeList + size;
		return block;
		*/
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		
		var int a;
		let a = o;
		let ram[a-2] = freeList[0];
		let freeList[0] = a-2;
		
		return;
    }
	//bonus: defragmentation?
	
}
