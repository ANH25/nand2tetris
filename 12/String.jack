// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	
	field Array str;
	field int max_length, length;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		
		let max_length = maxLength + 1;
		let str = Array.new(max_length);
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(str);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if(j < length) {
			return str[j];
		}
		else {
			return 0;
		}
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if(j < length) {
			let str[j] = c;
		}
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(length < max_length) {
			let str[length] = c;
			let length = length + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(length > 0) {
			let length = length - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		
		var int i, sign, n, c;
		let sign = 1;
		let n = 0;
		let i = 0;
		while(i < length) {
			let c = str[i];
			if(~((c > 47) & (c < 58))) {
				if((i = 0) & (c = 45)) {
					// '-' char
					let sign = -1;
				}
				else {
					if((i = 0) & (c = 43)) {
						// '+' char
						let sign = 1;
					}
					else {
						// break on first non-digit character
						let i = length;
					}
				}
			}
			else {
				let n = n * 10 + c - 48;
			}
			let i = i + 1;
		}
		return sign * n;
    }
	
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	
		var int cur_val, digit, i, dec, len_halved;
		var char c, tmp;
		if(val < 0) {
			let str[0] = 45; // '-' char
			let length = 1;
			let i = 1;
			let dec = 0;
			let val = (-val);
		}
		else {
			let length = 0;
			let i = 0;
			let dec = 1;
		}
		while(~(val = 0)) {
			let cur_val = val / 10;
			let digit = val - (cur_val*10);
			let val = cur_val;
			if(length < max_length) {
				let str[length] = 48 + digit;
				let length = length + 1;
			}
		}
		
		let len_halved = length / 2;
		while(i < len_halved) {
			// reverse string
			let tmp = str[i];
			let str[i] = str[length - i - dec];
			let str[length - i - dec] = tmp;
			let i = i + 1;
		}
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
